// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(12)
            {
                { typeof(global::System.Collections.Generic.List<global::ItemInfo>), 0 },
                { typeof(global::System.Collections.Generic.List<global::SyncManager.UnitData>), 1 },
                { typeof(global::Define.eItemType), 2 },
                { typeof(global::Packet.ePACKET_TYPE), 3 },
                { typeof(global::ItemInfo), 4 },
                { typeof(global::Packet.PacketBase), 5 },
                { typeof(global::Packet.PacketReward), 6 },
                { typeof(global::Server.AnimalMergeServer.PacketBase), 7 },
                { typeof(global::Server.AnimalMergeServer.PacketReward), 8 },
                { typeof(global::SyncManager.SVector3), 9 },
                { typeof(global::SyncManager.SyncPacket), 10 },
                { typeof(global::SyncManager.UnitData), 11 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::ItemInfo>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::SyncManager.UnitData>();
                case 2: return new MessagePack.Formatters.Define.eItemTypeFormatter();
                case 3: return new MessagePack.Formatters.Packet.ePACKET_TYPEFormatter();
                case 4: return new MessagePack.Formatters.ItemInfoFormatter();
                case 5: return new MessagePack.Formatters.Packet.PacketBaseFormatter();
                case 6: return new MessagePack.Formatters.Packet.PacketRewardFormatter();
                case 7: return new MessagePack.Formatters.Server.AnimalMergeServer_PacketBaseFormatter();
                case 8: return new MessagePack.Formatters.Server.AnimalMergeServer_PacketRewardFormatter();
                case 9: return new MessagePack.Formatters.SyncManager_SVector3Formatter();
                case 10: return new MessagePack.Formatters.SyncManager_SyncPacketFormatter();
                case 11: return new MessagePack.Formatters.SyncManager_UnitDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Define
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class eItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Define.eItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Define.eItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Define.eItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Define.eItemType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Packet
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ePACKET_TYPEFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Packet.ePACKET_TYPE>
    {
        public void Serialize(ref MessagePackWriter writer, global::Packet.ePACKET_TYPE value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Packet.ePACKET_TYPE Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Packet.ePACKET_TYPE)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class ItemInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ItemInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ItemInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Key, options);
            formatterResolver.GetFormatterWithVerify<global::Define.eItemType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Amount);
        }

        public global::ItemInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::ItemInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Key = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Type = formatterResolver.GetFormatterWithVerify<global::Define.eItemType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Amount = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SyncManager_SVector3Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SyncManager.SVector3>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SyncManager.SVector3 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::SyncManager.SVector3 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::SyncManager.SVector3();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.z = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SyncManager_SyncPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SyncManager.SyncPacket>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SyncManager.SyncPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SyncManager.UnitData>>().Serialize(ref writer, value.UnitsDatas, options);
            writer.Write(value.AttackDamage);
            writer.Write(value.AttackCombo);
            writer.Write(value.StackDamage);
            writer.Write(value.isGameOver);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.GameOverTime, options);
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.ReadyTime, options);
        }

        public global::SyncManager.SyncPacket Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SyncManager.SyncPacket();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.UnitsDatas = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SyncManager.UnitData>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.AttackDamage = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.AttackCombo = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.StackDamage = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.isGameOver = reader.ReadBoolean();
                        break;
                    case 5:
                        ____result.GameOverTime = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.ReadyTime = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SyncManager_UnitDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SyncManager.UnitData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::SyncManager.UnitData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UnitKey, options);
            formatterResolver.GetFormatterWithVerify<global::SyncManager.SVector3>().Serialize(ref writer, value.UnitPosition, options);
            formatterResolver.GetFormatterWithVerify<global::SyncManager.SVector3>().Serialize(ref writer, value.UnitRotation, options);
        }

        public global::SyncManager.UnitData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::SyncManager.UnitData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.UnitKey = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.UnitPosition = formatterResolver.GetFormatterWithVerify<global::SyncManager.SVector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.UnitRotation = formatterResolver.GetFormatterWithVerify<global::SyncManager.SVector3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Packet
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class PacketBaseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Packet.PacketBase>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Packet.PacketBase value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Serialize(ref writer, value.PacketType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Serialize(ref writer, value.hash, options);
        }

        public global::Packet.PacketBase Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Packet.PacketBase();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.PacketType = formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.hash = formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PacketRewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Packet.PacketReward>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Packet.PacketReward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Serialize(ref writer, value.PacketType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Serialize(ref writer, value.hash, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ItemInfo>>().Serialize(ref writer, value.Rewards, options);
        }

        public global::Packet.PacketReward Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Packet.PacketReward();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.PacketType = formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.hash = formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Rewards = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ItemInfo>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Server
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AnimalMergeServer_PacketBaseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Server.AnimalMergeServer.PacketBase>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Server.AnimalMergeServer.PacketBase value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Serialize(ref writer, value.PacketType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Serialize(ref writer, value.hash, options);
        }

        public global::Server.AnimalMergeServer.PacketBase Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Server.AnimalMergeServer.PacketBase();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.PacketType = formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.hash = formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AnimalMergeServer_PacketRewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Server.AnimalMergeServer.PacketReward>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Server.AnimalMergeServer.PacketReward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Serialize(ref writer, value.PacketType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Serialize(ref writer, value.hash, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ItemInfo>>().Serialize(ref writer, value.Rewards, options);
        }

        public global::Server.AnimalMergeServer.PacketReward Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Server.AnimalMergeServer.PacketReward();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.PacketType = formatterResolver.GetFormatterWithVerify<global::Packet.ePACKET_TYPE>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.hash = formatterResolver.GetFormatterWithVerify<global::System.Collections.Hashtable>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Rewards = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ItemInfo>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

